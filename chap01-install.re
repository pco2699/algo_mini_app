= 環境構築

各種アルゴリズムの説明に入る前に、今回作成するWebアプリの基本構成および環境構築の方法について説明します。

各章でそれぞれ一つのミニアプリを作る予定ですが、すべて同じ環境上に作るため、ここでまとめて説明します。

== 今回の構成

今回は以下の構成でWebアプリを作ります。

//image[architecture][今回の構成]{
//}

それぞれの要素について説明します。

=== Firebase

今回は、Firebaseと呼ばれるWebサイトのホスティングやDBをサクッと作れるBaaS(Backend as a service)上にWebサービスを作ります。
Firebaseを利用することで、難しかったインフラ構築やサーバーデプロイなどの作業が不要になるため、一人でWebサービスをサクッとプロトタイピングするのに向いています。

また、複雑な要件や大量のアクセス、大人数に利用される利用要件が無ければ @<b>{ほぼ無料} で使えるのが素晴らしいポイントです。
ほぼ無料と書きましたが、今回のアプリを作る分には、お金はかからないと思います。

サクッと一人で、コストも抑えてWebアプリを作るため、Firebaseを今回は採用することにしました。



=== Firebase Hosting

Firebase HostingはFirebaseのサービスの一つで、HTMLやCSS、JSなどの静的ファイルをホスティングするためのサービスです。
PHPやJava, Pythonなどはもちろん動きませんが、後述する「静的サイトジェネレーター」を組み合わせることで、フロントエンドフレームワークで作成された
ファイルをデプロイすることができます。

コストも抑えることができるので、個人開発などにおすすめです。

=== Cloud Firestore

データの永続化を行うDBです。Webサービスだと @<tt>{MySQL}や@<tt>{PostgreSQL}などのRDB(リレーショナル・データベース)が使われることが多いですが
今回は実装の容易性などからNoSQL型のデータベースであり、Firebaseで標準的に使われている@<tt>{Cloud Firestore} を利用してデータの永続化を行います。

NoSQLでスキーマレスなので、データベースのスキーマ定義などがなかったり、途中でデータ追加したい！となっても、データを追加したりできるのが便利な点です。

=== Nuxt.js
今回、Nuxt.jsと呼ばれるフロントエンドフレームワークを用いて、Webサービスを作成します。Nuxt.jsはVue.jsと呼ばれるフレームワークはベースになっており
HTML/CSSが理解できていれば、非常に理解しやすく扱いやすいフロントエンドフレームワークです。

Nuxt.jsには「静的サイトジェネレーター」の機能もあり、これを用いて、生成されたHTML/CSSなどを firebase hostingにデプロイすることで
今回のWebアプリを作っていきます。

== 環境をつくろう

=== Firebaseへのサインアップ

まずは何より、Firebaseへサインアップを行いましょう。
Firebaseは以下のページからサインアップできます。

@<href>{https://firebase.google.com/?hl=ja}

//image[firebase_signup][Firebaseのトップページ]{
//}

「使ってみよう」ボタンを押しましょう。

//image[google_login][Googleのログイン]{
//}

Googleのログインが求められると思うので自分のGoogleアカウントでログインしましょう。

//image[firebase_project][Firebaseのプロジェクト作成]{
//}

「プロジェクトを追加」でプロジェクトを追加しましょう。



=== Nuxt.jsの導入

==== 本書でのバージョン

本書では、以下のバージョンでNuxt.jsなどを動かします。
必要に応じてVerをあわせましょう。

//table[nuxt_ver][nuxt_ver]{
プロダクト名	バージョン
-----------------------
Nuxt.js	2.4.0
Node.js	10.14
Vuetify	1.5.0
//}

==== Nuxtの初期プロジェクト作成

Nuxtを動かすには、Node.jsの動作環境が必要です。
本書では、Node.jsの環境構築の手順は省略しますのでネットで検索して、Node.jsの環境構築をお願いします。
Nuxtの初期プロジェクトは

